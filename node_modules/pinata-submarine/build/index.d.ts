/// <reference types="node" />
import { GetSubmarinedContentOptions } from './types';
import fs from 'fs';
import PathLike = fs.PathLike;
export declare class Submarine {
    submarineKey: String;
    gatewayUrl: String;
    constructor(submarineApiKey: String, gatewayUrl: String);
    getSubmarinedContentByCid(submarinedCid: String): Promise<any>;
    getSubmarinedContent(options: GetSubmarinedContentOptions): Promise<any>;
    listFolderContent(itemId: String, offset?: String): Promise<{
        childContent: any;
        hasIndexHtml: boolean;
    }>;
    generateAccessLink(timeoutSeconds: Number, contentId: string, submarinedCid: String, filepath?: String): Promise<string>;
    uploadFileOrFolder(filepath: PathLike, name?: String, metadata?: any, cidVersion?: Number): Promise<any>;
    uploadJson(content: any, name: string, cidVersion?: Number, metadata?: any): Promise<any>;
    updateFileName(contentId: String, name: String): Promise<any>;
    updateFileMetadata(contentId: String, metadata: any): Promise<any>;
    makeFilePublic(contentId: String): Promise<any>;
    deleteContent(contentId: String): Promise<any>;
    verifyEVMNFT(signature: string, address: string, messageId: string, blockchain: string, contractAddress: string, network: string, tokenId?: string): Promise<boolean>;
    getEVMMessageToSign(blockchain: string, contractAddress: string): Promise<any>;
}
